
#ifndef _MT_ADDIN_HPP_
#define _MT_ADDIN_HPP_ 1

#include "MersenneTwister.h"

#include "mt_config.hpp"

#include <osl/mutex.hxx>
#include <cppuhelper/implbase4.hxx>

#include <com/sun/star/lang/XServiceName.hpp>
#include <com/sun/star/sheet/XAddIn.hpp>
//#include <com/sun/star/sheet/XCompatibilityNames.hpp>
#include <com/sun/star/lang/XServiceInfo.hpp>
#include <com/sun/star/uno/XComponentContext.hpp>

#include "mytools/sheet/XMTRandomAddIn.hpp"

#define IMPLEMENTATION_NAME "mytools.sheet.MTRandomAddIn"
#define SERVICE_NAME "mytools.sheet.MTRandomAddIn"
#define ADDIN_SERVICE_NAME "com.sun.star.sheet.AddIn"

// function descriptions
#define MTRAND_NAME "getMTRand"
#define MTRAND_DISPLAY_NAME "MTRand"
#define MTRAND_DESCRIPTION "Returns a random number generated by Mersenne Twister algorithm between 0 and 1."

#define MTRANDBETWEEN_NAME "getMTRandBetween"
#define MTRANDBETWEEN_DISPLAY_NAME "MTRandBetween"
#define MTRANDBETWEEN_DESCRIPTION "Returns a random integer generated by Mersenne Twister algorithm between the numbers you specify."
#define MTRANDBETWEEN_ARG_NAME_1 "Bottom"
#define MTRANDBETWEEN_ARG_NAME_2 "Top"
#define MTRANDBETWEEN_ARG_DESC_1 "Smallest integer returned"
#define MTRANDBETWEEN_ARG_DESC_2 "Largest integer returned"


#define CATEGORY_NAME "Mathematical"


namespace mytools { namespace sheet {
	
class MTRandomAddIn : 
	public ::cppu::WeakImplHelper4
		<
			::mytools::sheet::XMTRandomAddIn, 
			::com::sun::star::sheet::XAddIn, 
			::com::sun::star::lang::XServiceName, 
			::com::sun::star::lang::XServiceInfo
			//::com::sun::star::sheet::XCompatibilityNames, 
		>
{
private : 
	MTRand mMTRand;
	//MTRand mMTRandBetween;
	::osl::Mutex lock;
	
	::com::sun::star::lang::Locale mLocale;

public : 
	
	MTRandomAddIn( ::com::sun::star::uno::Reference< ::com::sun::star::uno::XComponentContext > const &xComponentContext );
	~MTRandomAddIn();
	
	static ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface > create( const ::com::sun::star::uno::Reference< ::com::sun::star::uno::XComponentContext > &xComponentContext);
	
	// XMTRandomAddIn
	virtual double SAL_CALL getMTRand(  ) throw (::com::sun::star::uno::RuntimeException);
	virtual double SAL_CALL getMTRandBetween( double min, double max ) throw (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::uno::RuntimeException);
	
	// XLocalizable
	virtual void SAL_CALL setLocale( const ::com::sun::star::lang::Locale& eLocale ) throw (::com::sun::star::uno::RuntimeException);
	virtual ::com::sun::star::lang::Locale SAL_CALL getLocale(  ) throw (::com::sun::star::uno::RuntimeException);
    
	// XAddIn
	virtual ::rtl::OUString SAL_CALL getProgrammaticFuntionName( const ::rtl::OUString& aDisplayName ) throw (::com::sun::star::uno::RuntimeException);
	virtual ::rtl::OUString SAL_CALL getDisplayFunctionName( const ::rtl::OUString& aProgrammaticName ) throw (::com::sun::star::uno::RuntimeException);
	virtual ::rtl::OUString SAL_CALL getFunctionDescription( const ::rtl::OUString& aProgrammaticName ) throw (::com::sun::star::uno::RuntimeException);
	virtual ::rtl::OUString SAL_CALL getDisplayArgumentName( const ::rtl::OUString& aProgrammaticFunctionName, ::sal_Int32 nArgument ) throw (::com::sun::star::uno::RuntimeException);
	virtual ::rtl::OUString SAL_CALL getArgumentDescription( const ::rtl::OUString& aProgrammaticFunctionName, ::sal_Int32 nArgument ) throw (::com::sun::star::uno::RuntimeException);
	virtual ::rtl::OUString SAL_CALL getProgrammaticCategoryName( const ::rtl::OUString& aProgrammaticFunctionName ) throw (::com::sun::star::uno::RuntimeException);
	virtual ::rtl::OUString SAL_CALL getDisplayCategoryName( const ::rtl::OUString& aProgrammaticFunctionName ) throw (::com::sun::star::uno::RuntimeException);
    
	// XServiceName
	virtual ::rtl::OUString SAL_CALL getServiceName(  ) throw (::com::sun::star::uno::RuntimeException);
	
	// XCompatibilityNames
	/*
	virtual ::com::sun::star::uno::Sequence< ::com::sun::star::sheet::LocalizedName > SAL_CALL getCompatibilityNames( const ::rtl::OUString& aProgrammaticName ) throw (::com::sun::star::uno::RuntimeException);
	*/
	
	// XServiceInfo
	virtual ::rtl::OUString SAL_CALL getImplementationName(  ) throw (::com::sun::star::uno::RuntimeException);
	virtual ::sal_Bool SAL_CALL supportsService( const ::rtl::OUString& ServiceName ) throw (::com::sun::star::uno::RuntimeException);
	virtual ::com::sun::star::uno::Sequence< ::rtl::OUString > SAL_CALL getSupportedServiceNames(  ) throw (::com::sun::star::uno::RuntimeException);
	
	static ::rtl::OUString SAL_CALL getImplementationName_Static();
	static ::com::sun::star::uno::Sequence< ::rtl::OUString > SAL_CALL getSupportedServiceNames_Static();
};

} } // namesapce

#endif
